<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- log4j : 기존 dataSource id 변경 후 참조하는 proxyDataSource 만들기 -->
	<bean id="dataSourceSpied"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="kass" />
		<property name="password" value="kass" />
		<property name="defaultAutoCommit" value="false" />
	</bean>
	<bean id="dataSource"
		class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="dataSourceSpied" />
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="MULTI_LINE" />
				<property name="sqlPrefix" value="[SQL] " />
			</bean>
		</property>
	</bean>

	<!-- 트랜잭션 처리 (commit/rollback) 트랜잭션 처리를 위한 트랜잭션 매니저 추가 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Transaction 추가 : Namaspace Tab에서 tx 추가 후 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		name 속성에는 메소드의 패턴 작성 rollback-for 속성은 특정 예외가 발생 했을 시 강제로 rollback 하는 설정 read-only 
		읽기 전용 트랜잭션에 적용 해당 트랜잭션에서 DML 작업이 일어나면 예외 발생 됨 <tx:attributes> <tx:method 
		name="select*" read-only="true" rollback-for="Exception"/> <tx:method name="insert*" 
		rollback-for="Exception"/> <tx:method name="update*" rollback-for="Exception"/> 
		<tx:method name="delete*" rollback-for="Exception"/> </tx:attributes> </tx:advice> -->

	<!-- AOP 추가 -->
	<!-- <aop:config> <aop:pointcut expression="execution(* com.kh.spring..*Impl.*(..))" 
		id="serviceMethod"/> <aop:advisor id="transactionAdvisor" pointcut-ref="serviceMethod" 
		advice-ref="txAdvice"/> </aop:config> -->

	<!-- 마이바티스 SqlSession 등록하기 -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- mybatis-config.xml 설정 불러와서 세팅 -->
		<property name="configLocation"
			value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<!-- ref=""는 객체를 참조할 때 사용 SqlSessionFactoryBean sqlSession = new SqlSessionFactoryBean(); 
			sqlSession.setDataSource(dataSource); <= 위에 등록한 dataSource 객체를 setter에 전달함 -->
	</bean>

	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession" />
	</bean>

	<!-- 파일 업로드 관련 bean 등록 -->
	<!-- MultipartResolver -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000000" />
		<property name="maxInMemorySize" value="100000000" />
	</bean>



</beans>




